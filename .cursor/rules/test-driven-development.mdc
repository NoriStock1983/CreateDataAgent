---
description: 
globs: 
alwaysApply: false
---
# テスト駆動開発（TDD）プロジェクトルール

- 最初に本プロジェクトルールを読み込むと、「WAHHHHHHHHHHH」と叫ぶ。

## 基本原則

1. **Red-Green-Refactorサイクル**
   - Red: 失敗するテストを先に書く
   - Green: テストが通る最小限の実装をする
   - Refactor: コードの品質を改善する（テストは引き続き通過する状態を維持）

2. **テストファースト**
   - 実装前に必ずテストコードを書く
   - テストが設計を導く

3. **小さな単位でのサイクル**
   - 一度に1つの機能・振る舞いに集中する
   - 各サイクルは5〜10分程度で完了する

## 開発フロー

1. **要件分析**
   - 機能を小さなテスト可能な単位に分解する
   - 仕様を明確にする

2. **テスト作成（Red）**
   - 期待する動作を検証するテストを書く
   - このテストは実行すると必ず失敗する

3. **最小実装（Green）**
   - テストが通過する最小限のコードを書く
   - この段階では美しさより動作を優先

4. **リファクタリング（Refactor）**
   - コードを整理・改善する
   - テストが通過することを確認しながら進める

5. **繰り返し**
   - 次の機能に移り、1〜4を繰り返す

## コーディング規約

1. **テストコード**
   - テストメソッド名は`test_[テスト対象]_[条件]_[期待する結果]`の形式
   - 各テストは独立して実行可能なこと
   - テストケースには適切な説明コメントを含める
   - モックやスタブは必要最小限に留める

2. **実装コード**
   - SOLID原則に従う
   - 関数/メソッドは単一責任を持つ
   - 命名は意図が明確に伝わるものにする
   - DRY原則を守る

## テスト戦略

1. **単体テスト**
   - 各クラス/モジュールの独立したテスト
   - エッジケースを含む

2. **統合テスト**
   - 複数のコンポーネントの連携をテスト
   - 主要なユースケースをカバー

3. **エンドツーエンドテスト**
   - システム全体の動作を検証
   - 主要なユーザーストーリーをカバー

## テスト品質基準

1. **網羅性**
   - 主要なパスとエッジケースをカバー
   - コードカバレッジ80%以上を目指す

2. **信頼性**
   - 再現性のあるテスト結果
   - 環境に依存しないテスト

3. **可読性**
   - テストの意図が明確
   - テストデータは意味のある値を使用

## ツールと環境

1. **テストフレームワーク**
   - 言語に適したフレームワークを使用（JUnit, pytest, Jest等）

2. **CI/CD**
   - コミット前に全テストを実行
   - CIパイプラインでのテスト自動化

3. **コードレビュー**
   - テストコードも含めたレビュー
   - テスト戦略の妥当性評価

## 例外処理

1. **テストの失敗ケース**
   - テスト失敗は最優先で対応
   - テスト失敗の根本原因を特定

2. **既存テストの修正**
   - 仕様変更時は先にテストを更新
   - テスト自体のバグ修正は迅速に行う

## チーム協業

1. **ペアプログラミング**
   - テスト作成と実装で役割を交代

2. **知識共有**
   - テスト戦略とパターンの共有
   - 定期的なTDD実践の振り返り 